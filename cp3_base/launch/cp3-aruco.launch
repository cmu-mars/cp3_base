<!-- Launch file for challenge problem 1 -->
<launch>
  <!-- Parameters for the kobuki base with the kinect sensor -->
  <arg name="base" value="$(optenv TURTLEBOT_BASE kobuki)"/>
  <arg name="3d_sensor" value="$(optenv TURTLEBOT_3D_SENSOR kinect)"/>
  <arg name="stacks" value="$(optenv TURTLEBOT_STACKS hexagon)"/>

  <!-- The param file is turning off various navigation options on move_base to
       hamper the navigation -->
  <arg name="custom_param_file" value="$(find cp3_base)/param/move_base_params.yaml"/>

  <!-- This is the map file that will be used for planning -->
  <arg name="map_file" value="$(find cp3_base)/maps/cp3.yaml"/>

  <!-- Start the gazebo world, so that obstacles can be mapped -->
  <!-- NOTE: The maze in the world might not be needed if the map server is required -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find cp3_base)/worlds/cp3.world"/>
    <arg name="gui" value="false"/>
    <arg name="headless" value="true"/>
    <!--<arg name="debug" value="true"/>-->
  </include>

  <!-- Spawn the turtlebot -->
  <arg name="urdf_file" default="$(find xacro)/xacro.py '$(find cp3_base)/robot_description/cp3/urdf/kobuki_hexagons_kinect.urdf.xacro'" />
  <param name="robot_description" command="$(arg urdf_file)" />
  <node name="spawn_turtlebot_model" pkg="gazebo_ros" type="spawn_model"
        args="-x 0 -y 0 -unpause -urdf -param robot_description -model mobile_base"/>

  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="30.0"/>
  </node>

  <node name="static_tf_pub_world_to_gazebo_world" pkg="tf2_ros" type="static_transform_publisher" args="0 0 0  0 0 0 1 world gazebo_world" />
  <node name="gazebo2tf" pkg="gazebo2rviz" type="gazebo2tf_node.py" output="screen">
    <param name="ignore_submodels_of" value="" type="str" />
    <param name="include_only_models" value="Marker" type="str" />
  </node>

  <node pkg="tf" type="static_transform_publisher" name="map_to_world" args="0 0 0 0 0 0 1 world map 100" /> 

<!--

  <node pkg="tf" type="static_transform_publisher" name="fix_camera" args="0 0 0 -0.5 0.5 -0.5 0.5 camera_depth_optical_frame camera_temp_link 100" />
-->
<!--
   <node pkg="tf" type="static_transform_publisher" name="fix_camera" args="0 0 0 0.5 0.5 -0.5 0.5 camera_depth_optical_frame camera_temp_link 100" />
-->
  <!-- Map server -->
  <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)"/>

  <!-- Velocity muxer -->
  <node pkg="nodelet" type="nodelet" name="mobile_base_nodelet_manager" args="manager"/>
  <node pkg="nodelet" type="nodelet" name="cmd_vel_mux"
        args="load yocs_cmd_vel_mux/CmdVelMuxNodelet mobile_base_nodelet_manager">
    <param name="yaml_cfg_file" value="$(find turtlebot_bringup)/param/mux.yaml" />
    <remap from="cmd_vel_mux/output" to="mobile_base/commands/velocity"/>
  </node>


  <node pkg="tf" type="static_transform_publisher" name="fix_camera" args="0 0 0 0 0 0 1 camera_depth_optical_frame camera_temp_link 100" />


  <node pkg="aruco_ros" type="marker_publisher" name="aruco_marker_publisher">
      <remap from="/camera_info" to="/camera/rgb/camera_info"/>
      <remap from="/image" to="/camera/rgb/image_raw"/>
      <param name="marker_size" value="0.5"/>
      <param name="reference_frame" value="/camera_temp_link"/>
      <param name="camera_frame" value="/camera_temp_link"/>
    </node>

   <node pkg="cp3_base" type="marker_manager.py" name="marker_manager">
      <param name="~marker_file" value="$(find cp3_base)/maps/markers.json"/>
   </node>

   <node pkg="cp3_base" type="marker_pose_publisher.py" name="marker_pose_publisher">
      <param name="~marker_file" value="$(find cp3_base)/maps/markers.json"/>
   </node>

  <!-- Launch move base -->
  <!-- TODO: move to separate Docker container -->
  <include file="$(find turtlebot_navigation)/launch/includes/move_base.launch.xml">
    <arg name="custom_param_file" value="$(arg custom_param_file)"/>
  </include>

  <!-- This is the initial pose (for AMCL) of the turtlebot -->
  <!--

  <node pkg="nodelet" type="nodelet" name="laserscan_nodelet_manager" args="manager"/>
  <node pkg="nodelet" type="nodelet" name="depthimage_to_laserscan"
        args="load depthimage_to_laserscan/DepthImageToLaserScanNodelet laserscan_nodelet_manager">
    <param name="scan_height" value="10"/>
    <param name="output_frame_id" value="/camera_depth_frame"/>
    <param name="range_min" value="0.45"/>
    <remap from="image" to="/camera/depth/image_raw"/>
    <remap from="scan" to="/scan"/>
  </node>
  <arg name="initial_pose_x" default="0.0"/> 
  <arg name="initial_pose_y" default="0.0"/> 
  <arg name="initial_pose_a" default="0.0"/>
  <include file="$(find turtlebot_navigation)/launch/includes/amcl/kinect_amcl.launch.xml">
    <arg name="initial_pose_x" value="0"/>
    <arg name="initial_pose_y" value="0"/>
    <arg name="initial_pose_a" value="$(arg initial_pose_a)"/>
  </include>
  -->
</launch>
