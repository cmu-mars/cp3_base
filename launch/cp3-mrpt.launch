<!-- Launch file for challenge problem 1 -->
<launch>
  <!-- Parameters for the kobuki base with the kinect sensor -->
  <arg name="base" value="$(optenv TURTLEBOT_BASE kobuki)"/>
  <arg name="3d_sensor" value="$(optenv TURTLEBOT_3D_SENSOR kinect)"/>
  <arg name="stacks" value="$(optenv TURTLEBOT_STACKS hexagon)"/>
  <arg name="kinect_mode" value="1"/>
  <arg name="lidar_mode" value="false"/>
  <param name="/use_sim_time" value="true"/>

  <!-- The param file is turning off various navigation options on move_base to
       hamper the navigation -->
  <arg name="custom_param_file" value="$(find cp3_base)/param/move_base_params.yaml"/>

  <!-- This is the map file that will be used for planning -->
  <arg name="map_file" value="$(find cp3_base)/maps/cp3-mrpt.yaml"/>

  <!-- Start the gazebo world, so that obstacles can be mapped -->
  <!-- NOTE: The maze in the world might not be needed if the map server is required -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find cp3_base)/worlds/cp3.world"/>
    <arg name="gui" value="false"/>
    <arg name="headless" value="true"/>
    <!--<arg name="debug" value="true"/>-->
  </include>

  <!-- Spawn the turtlebot -->
  <arg name="urdf_file" default="$(find xacro)/xacro.py '$(find cp3_base)/robot_description/cp3/urdf/kobuki_hexagons_kinect.urdf.xacro'" />
  <param name="robot_description" command="$(arg urdf_file)" />
  <node name="spawn_turtlebot_model" pkg="gazebo_ros" type="spawn_model"
        args="-x 0 -y 0 -unpause -urdf -param robot_description -model mobile_base"/>

  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="30.0"/>
  </node>
  
  <!-- Map server -->
  <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)"/>

  <!-- Velocity muxer -->
  <node pkg="nodelet" type="nodelet" name="mobile_base_nodelet_manager" args="manager"/>
  <node pkg="nodelet" type="nodelet" name="cmd_vel_mux"
        args="load yocs_cmd_vel_mux/CmdVelMuxNodelet mobile_base_nodelet_manager">
    <param name="yaml_cfg_file" value="$(find turtlebot_bringup)/param/mux.yaml" />
    <remap from="cmd_vel_mux/output" to="mobile_base/commands/velocity"/>
  </node>

  <!-- Fake the laster with kinect -->
  <node pkg="nodelet" type="nodelet" name="laserscan_nodelet_manager" args="manager"/>
  <node pkg="nodelet" type="nodelet" name="depthimage_to_laserscan"
        args="load depthimage_to_laserscan/DepthImageToLaserScanNodelet laserscan_nodelet_manager">
    <param name="scan_height" value="10"/>
    <param name="output_frame_id" value="/camera_depth_frame"/>
    <param name="range_min" value="0.45"/>
    <remap from="image" to="/camera/depth/image_raw"/>
    <remap from="scan" to="/scan"/>
  </node>

  <!-- Launch move base -->
  <!-- TODO: move to separate Docker container -->
  <include file="$(find turtlebot_navigation)/launch/includes/move_base.launch.xml"> 
    <!--<arg name="custom_param_file" value="$(arg custom_param_file)"/> -->
  </include>

  <!-- This is the startup for MRPT -->
  <arg name="ini_file" default="$(find cp3_base)/param/pf-localization.ini"/>
  <node pkg="mrpt_localization" type="mrpt_localization_node" name="mrpt_localization_node" output="screen">
    <param name="ini_file" value="$(arg ini_file)"/>
    <param name="map_file" value=""/> <!-- Do not pass - by default gets it from map server -->
    <param name="sensor_sources" value="scan"/>
    <param name="tf_prefix"  value=""/>
    <param name="global_frame_id" value="map"/>
    <param name="odom_frame_id" value="odom"/>
    <param name="base_frame_id" value="base_footprint"/>
    <param name="pose_broadcast" value="false"/>
    <param name="tf_broadcast" value="true"/>
    <param name="use_map_topic" value="false"/>
    <param name="gui_mrpt" value="true"/>
    <param name="debug" value="true"/>

  </node>
</launch>
